---
title: Analysis of double-platform data
author: Centre for Research into Ecological and Environmental Modelling <br> **University of St Andrews**
date-modified: "November 2024"
date-format: "MMMM YYYY"
bibliography: ../references.bib
csl: ../../style/apa.csl
---

:::{.callout-warning collapse=false appearance='default' icon=true}
# Analysis of double-platform data
:::

This version of the practical is for those who would like to conduct the analysis in R using the package `mrds` [@mrdspackage].  There is a separate version for conducting the analysis in Distance for Windows [@Thomas2010].

The first part of this practical involves initial analysis of a survey of a known number of golf tees. This is intended mainly to familiarise you with the `mrds` function. 

The second part of the practical involves more detailed analysis of the golf tee data, and an exploration of the double-platform data structure.

The third part of the practical involves analysis of the pack-ice seal survey data of @Borchers2006 and @Southwell2007.  

To help understand the terminology used in MRDS and the output produced by `mrds`, there is a guide available ['Interpreting MRDS output'](../DistWin-prac/Supplement-interpretingoutput.qmd). 

# Golf tee survey - initial analysis

## Golf tee survey 

These data come from a survey of golf tees which conducted by statistics students at the University of St Andrews. The data were collected along transect lines, 210 metres in total. A distance of 4 metres out from the centre line was searched and, for the purposes of this exercise, we assume that this comprised the total study area, which was divided into two strata. There were 250 clusters of tees in total and 760 individual tees in total. 

The population was independently surveyed by two observer teams. The following data were recorded for each detected group: perpendicular distance, cluster size, observer (team 1 or 2), 'sex' (males are yellow and females are green and golf tees occur in single-sex clusters) and 'exposure'. Exposure was a subjective judgment of whether the cluster was substantially obscured by grass (exposure=0) or not (exposure=1). The lengths of grass varied along the transect line and the grass was slightly more yellow along one part of the line compared to the rest. 

The golf tee dataset is provided as part of the `mrds` package.

Open R and load the `mrds` package and golf tee dataset (called `book.tee.data`). The elements required for an MRDS analysis are contained within the object dataset. These data are in a hierarchical structure (rather than in a 'flat file' format) so that there are separate elements for observations, samples and regions. In the code below, each of these tables is extracted to avoid typing long names.   

```{r preliminaries, message=FALSE, comment=NA, echo=TRUE}
# Load libraries
library(knitr) #Used to knit this markdown document together
library(mrds)
#Note - the Distance package is also used in the Crabeater seal example, to access
# the checkdata function, and to do an MCDS analysis.

# Access the golf tee data
data(book.tee.data)

# Extract the list elements from the dataset into easy-to-access objects
detections <- book.tee.data$book.tee.dataframe # detection information
region <- book.tee.data$book.tee.region # region info
samples <- book.tee.data$book.tee.samples # transect info
obs <- book.tee.data$book.tee.obs # links detections to transects and regions

# In the detections data frame, define sex and exposure as factor variables 
detections$sex <- as.factor(detections$sex)
detections$exposure <- as.factor(detections$exposure)
```

## Golf tee survey analyses

### Estimation of p: distance only

We will start by analysing these data assuming that Observer 2 was generating trials for Observer 1 but not vice versa, i.e. trial configuration where Observer 1 is the primary and Observer 2 is the tracker. (The data could also be analysed in independent observer configuration - you are welcome to try this for yourself). We begin by assuming full independence (i.e. detections between observers are independent at all distances): this requires only a mark-recapture (MR) model and, to start with, perpendicular distance will be included as the only covariate. 

Remember that `?` or `help` can be used to find out more about any of the functions used -- e.g., `?ddf` will tell you more about the ddf function. 

```{r, fit-nocovar, message=FALSE, comment=NA, fig.height=4, fig.cap="Goodness of fit (FI-trial) to golftee data."}
# Fit trial configuration with full independence model
fi.mr.dist <- ddf(method='trial.fi', mrmodel=~glm(link='logit',formula=~distance),
                  data=detections, meta.data=list(width=4))
```

#### Examining `mrds` output

Having fitted the model, we can create tables summarizing the detection data. In the commands below, the tables are created using the `det.tables` function and saved to `detection.tables`. 

```{r}
# Create a set of tables summarizing the double observer data 
detection.tables <- det.tables(fi.mr.dist)
# Print these detection tables
detection.tables
```

The information in detection summary tables can be plotted, but, in the interest of space, only one (out of six possible plots) is shown below. 

```{r dettabplot, echo=T, fig.height=4}
# Plot detection information, change number to see other plots
plot(detection.tables, which=1)
```

The plot numbers are:

1. Histograms of distances for detections by either, or both, observers. The shaded regions show the number for observer 1. 
2. Histograms of distances for detections by either, or both, observers. The shaded regions show the number for observer 2. 
3.	Histograms of distances for duplicates (detected by both observers).
4. Histogram of distances for detections by either, or both, observers. Not shown for trial configuration. 
5. Histograms of distances for observer 2. The shaded regions indicate the number of duplicates - for example, the shaded region is the number of clusters in each distance bin that were detected by Observer 1 given that they were also detected by Observer 2 (the "|" symbol in the plot legend means "given that"). 
6. Histograms of distances for observer 1. The shaded regions indicate the number of duplicates as for plot 5. Not shown for trial configuration. 

Note that if an independent observer configuration had been chosen, all plots would be available. 

A summary of the detection function model is available using the `summary` function. The Q-Q plot has the same interpretation as a Q-Q plot in a conventional, single platform analysis. 

```{r fi.summary, echo=T, fig.height=4}
# Produce a summary of the fitted detection function object
summary(fi.mr.dist)

# Produce goodness of fit statistics and a qq plot
gof.result <- ddf.gof(fi.mr.dist, 
                      main="Full independence, trial configuration\ngoodness of fit Golf tee data")
gof.result

# Extract chi-square statistics for reporting in the text below (see Markdown file for how this is done).
chi.distance <- gof.result$chisquare$chi1$chisq
chi.markrecap <- gof.result$chisquare$chi2$chisq
chi.total <- gof.result$chisquare$pooled.chi
```

The $\chi^2$ goodness-of-fit assessment shows the $\chi^2$ contribution from the distance sampling component to be `r round(chi.distance,1)` and the $\chi^2$ contribution from the mark-recapture component to be `r round(chi.markrecap,1)`.  The combination of these elements produces a total $\chi^2$ of `r round(chi.total$chisq,1)` with `r chi.total$df` degrees of freedom, resulting in a $p$-value of `r round(chi.total$p,3)`

The mark-recapture model detection function can be plotted with the following code:

```{r plotdf, echo=T, fig.height=3.5}
# Divide the plot region into 2 columns
par(mfrow=c(1,2))
# Plot detection functions
plot(fi.mr.dist)
```

##### The plot headed 

+ "Conditional detection probability" (the right hand plot) shows the proportion of Obs 2's detections that were detected by Obs 1 (also see the detection tables). The fitted line is the estimated detection probability function for Obs 1 (given detection by Obs 2) - this is the MR model. Dots are estimated detection probabilities for each Obs 1 detection.
+ "Observer=1 detections" (left hand plot) shows a histogram of Observer 1 detections with the estimated Observer 1 detection function (from the MR model) overlaid on it and adjusted for the estimated p(0). The dots show the estimated detection probability for all Observer 1 detections.  Note that the MR model was not fitted to these data -- it is the conditional data (right hand plot) that was used to fit the model.  This plot is just shown to help you diagnose any issues in the fit -- if there is dependency between observer detections then we'd expect the detection function to decrease slower than the histograms.

Is there evidence of unmodelled heterogeneity? What do these results tell you about the estimates of p (average detection probability) and p(0) (detection probability at 0 distance)?

#### Estimating abundance

Abundance is estimated using the `dht` function. In this function, we need to supply information about the transects and survey regions.  

```{r, abund-from-dist}
# Calculate density estimates using the dht function
tee.abund <- dht(model=fi.mr.dist, region.table=region, sample.table=samples, 
                 obs.table=obs)

# Print out results in a nice format
knitr::kable(tee.abund$individuals$summary, digits=2, 
      caption="Survey summary statistics for golftees")
knitr::kable(tee.abund$individuals$N, digits=2, 
      caption="Abundance estimates for golftee population with two strata")
```

### Estimation of p: distance and other explanatory variables

Below is a model that includes size, sex and exposure covariates.  Please spend a bit of time examining the model coefficients, goodness of fit, plots of the fitted detection functions, etc (you'll need to write your own code for this).

```{r}
# Example of adding covariates to MR detection function
fi.mr.dist.size.sex.exposure <- ddf(method='trial.fi', 
                      mrmodel=~glm(link='logit',formula=~distance+size+sex+exposure),
                      data=detections, meta.data=list(width=4))
```

We can use AIC to compare this with the previous model that just had distance as a covariate. The function `AIC` works on these objects:

```{r}
AIC(fi.mr.dist, fi.mr.dist.size.sex.exposure)
```

#  Golf tee survey

## Further analyses of golf tee data

### Estimation of p: distance and other explanatory variables

The size covariate is the least significant of the covariates in the model `fi.mr.dist.size.sex.exposure` – its estimate is 0.078 with SE 0.183. So try creating a new model definition and analysis without this covariate. Does it have a lower AIC?

You can also try some models with interaction terms - you can specify these in the usual way in the model foruma with a `*` symbol.  Don't spend too long on full independence models, but move on to the next section.

### Point independence

A less restrictive assumption than full independence is point independence, which assumes that detections are only independent on the transect centre line i.e. at perpendicular distance zero. 

Let's start by seeing if a simple point independence model is better than a simple full independence one. This requires that a distance sampling (DS) model is specified as well a MR model. Here we try a half-normal key function for the DS model. 

```{r pit-nocovar, echo=T, fig.height=3.5}
# Fit trial configuration with point independence model
pi.mr.dist <- ddf(method='trial', 
                  mrmodel=~glm(link='logit', formula=~distance),
                  dsmodel=~cds(key='hn'), 
                  data=detections, meta.data=list(width=4))

# Summary pf the model 
summary(pi.mr.dist)

# Produce goodness of fit statistics and a qq plot
gof.results <- ddf.gof(pi.mr.dist, main="Point independence, trial configuration\n goodness of fit Golftee data")
```

Compare the results with the corresponding full independence model. Which has the lower AIC? Which has an estimate closer to known true abundance. 

#### Covariates in the DS model

To include covariates in the DS detection function, we need to specify an MCDS model as follows:

```{r pit-mod1, echo=T, fig.height=3.5}
# Fit the PI-trial model - DS sex and MR distance 
pi.mr.dist.ds.sex <- ddf(method='trial', 
                         mrmodel=~glm(link='logit',formula=~distance),
                         dsmodel=~mcds(key='hn',formula=~sex), 
                         data=detections, meta.data=list(width=4))
```

Use the `summary` or `AIC` function to check the AIC and decide if you are going to include any additional covariates in the detection function. 

Now try a point independence model that has the preferred MR model from your full independence analyses. Which has the lower AIC and bias?  

Feel free to experiment some more with different models.  What is your final best model? What is the estimate of p and p(0) for this model? Was all this modelling necessary in this instance, given the value of p(0)? How else could you have obtained a robust estimate of abundance?

## Data structure

Before moving on to the second dataset, let's have a look at the columns in the `detections` data because, for all `mrds` analyses, it needs to have a particular structure.

```{r headdet, echo=T}
# Check detections
head(detections)
```
The structure of the detection is as follows:

+ each detected object (in this case the object was a group or cluster of golf tees) is given a unique number in the `object` column, 
+ each `object` occurs twice - once for observer 1 and once for observer 2, 
+ the `detected` column indicates whether the object was seen (`detected=1`) or not seen (`detected=0`) by the observer,
+ perpendicular distance is in the `distance` column and cluster size is in the `size` column (the same default names as for the `ds` function). 

To ensure that the variables `sex` and `exposure` are treated correctly, we defined them as factor variables.

# Crabeater seal survey 

## Crabeater seal data 

This analysis is described in @Borchers2006 and @Southwell2007. These data come from a helicopter survey of crabeater seals conducted by the Australian Antarctic Division within the pack-ice seals programme. The helicopter could only operate within a relatively short distance from the ice-breaker ship which acted as its base. The ice-breaker could only go where the pack ice was thin enough and so the aerial transects could not be located at random. This means that design-based estimation was not a valid option and so, in the published analysis, abundance was estimated using density surface modelling. For the purposes of this exercise, we concentrate on detection function estimation and create an artificial region as a device to produce abundance estimates. 

There were four independent observers in the helicopter, two on each side (front and back). The front observers were considered to be one 'team' and the back observers were considered to be the other 'team'. Various environmental factors were recorded. In addition to perpendicular distance, observer (1=front or 2=back) and cluster size, the following explanatory variables are available:

- side -- the side of the helicopter from which seal were seen (L and R)
- exp -- the experience (in survey hours) of the observer
- fatigue -- the number of minutes the observer had been on duty on the current flight
- gscat -- group size category (1, 2 and greater than or equal to 3)
- vis -- visibility category (Poor, Good and Excellent)
- glare -- whether there was glare (Yes or No)
- ssmi -- a measure of ice cover
- altitude -- the height of the aircraft in metres
- obsname -- unique identifier of observer

The data from the survey has been saved in a `.csv` file. This file is read into R using `read.csv`.

```{r, crabdat, comment=NA, echo=T, message=F}
crabseal <- read.csv("crabbieMRDS.csv")
str(crabseal)
```

If you've used Distance for Windows you might recognize some of the column names from that - indeed the dataset has been exported from Distance for Windows into the `.csv` file.  The first column can be ignored.  `Region.Label` and `Area` relate to the strata (their names and area - there's only one in this dataset).  `Sample.Label` and `Effort` relate to the transects.  The columns `distance` onwards relate to the observations.  You can see there are columns for each explanatory variable above, plus one additional one called `fold` that will enable use to pick a subset of the data (see later on).

Convert the explanatory variables that should be fitted as factor variables into factors.

```{r}
crabseal$side <- as.factor(crabseal$side)
crabseal$vis <- as.factor(crabseal$vis)
crabseal$glare <- as.factor(crabseal$glare)
crabseal$observer <- as.factor(crabseal$observer)
crabseal$obsname <- as.factor(crabseal$obsname)
```

## Crabeater seal analyses

The observer teams acted independently and so an 'independent observer' (IO) configuration can be specified. The code below fits simple models (i.e. distance only) with the full independence assumption and the point independence assumption. For each model, make a note of the estimated values for $p(0)$ for each observer and the observers combined. Check goodness-of-fit and plot the detection function. 

Fit an IO configuration assuming full independence: 

```{r}
# IO configuration - full independence
# MR model - distance only
# Truncation 700m
fi.mr.dist <- ddf(method="io.fi", mrmodel=~glm(link="logit", formula=~distance),
                 data=crabseal, meta.data=list(width=700))
summary(fi.mr.dist)
```

Next fit IO configuration assuming point independence. Specify a half-normal key function for the DS model; again only include perpendicular distance in the MR model.

```{r crabdet, echo=T}
# IO configuration - point independence
# MR model - distance only
# DS model - half normal detection function, no additional covars
# Truncation at 700m
pi.mr.dist.ds.hn <- ddf(method="io", dsmodel=~cds(key="hn"),
                 mrmodel=~glm(link="logit", formula=~distance),
                 data=crabseal, meta.data=list(width=700))
summary(pi.mr.dist.ds.hn)
```

*Which of these models do you prefer? *

If you have time, try a few models with covariates.  However, this is a large dataset and so fitting models and obtaining model summaries can take a long time with complicated models.  Given this and the fact that the exercise is just for practice, you may want to work with just a subset of the data -- which is where the `fold` column in the dataset comes in.  With this column, each observation is associated with a number from 1 to 10 (they are assigned systematically in order of the data, so the first observation is given number 1, the second 2, ..., the 10th 10, the 11th 1 again, the 12th 2, etc).  So, for example, you could pick out just the first and fifth ``fold'' (i.e., just one fifth of the data) with

```{r}
crabseal15 <- crabseal[crabseal$fold %in% c(1, 5), ]
```

and then use this to investigate covariate selection - for example comparing point independence models where the mr model has just distance in it vs one with distance and observer:

```{r}
pi.mr.dist.ds.hn.fold15 <- ddf(method="io", dsmodel=~cds(key="hn"),
                 mrmodel=~glm(link="logit", formula=~distance),
                 data=crabseal15, meta.data=list(width=700))
pi.mr.dist.observer.ds.hn.fold15 <- ddf(method="io", dsmodel=~cds(key="hn"),
                 mrmodel=~glm(link="logit", formula=~distance+observer),
                 data=crabseal15, meta.data=list(width=700))
AIC(pi.mr.dist.ds.hn.fold15, pi.mr.dist.observer.ds.hn.fold15)
```

#### Estimating abundance

Following model criticism and selection, the abundance can be estimated -- below we use the simple point independence model on the full dataset. The estimates of abundance for the study area are arbitrary because inference of the study was restricted to the covered region, hence, the estimates of abundance here are artificial. Nevertheless, we illustrate the method to estimate abundance. We require tables of the region, transects and detections -- these can easily be created from the data using the `checkdata` function in the `Distance` package (the `:::` is shorthand for accessing a function without loading a package). Using these tables, Horvitz-Thompson-like^[$\hat{N} = \sum_{i=1}^n \frac{1}{\pi_i \hat{p}_i}$ where $n$ is the number of observations, $\pi_i$ is the "coverage probability", i.e., the probability the object is covered by a transect, and $\hat{p}_i$ is the estimated detection probability, i.e., the probability the object is detected given it is covered by a transect.] estimators can be applied to produce estimates of $\hat{N}$. The use of `convert.units=0.001` adjusts the units of perpendicular distance measurement (m) to units of transect effort (km). 

```{r, crabsummary, echo=T}
# Create tables for estimating abundance 
# Selecting observer==1 ensures that observations in the obs.table are unique 
tables <- Distance:::checkdata(crabseal[crabseal$observer==1, ])

# Estimate abundance in covered region
pi.abund <- dht(model=pi.mr.dist.ds.hn,
                region=tables$region.table, 
                sample=tables$sample.table, obs=tables$obs.table,
                se=TRUE, options=list(convert.units=0.001))

# Pretty tables of data summary
knitr::kable(pi.abund$individuals$summary, digits=3,
      caption="Summary information from crabeater seal aerial survey.")
```

```{r, crabestimates}
# Pretty tables of estimates of individual abundance
knitr::kable(pi.abund$individual$N, digits=3,
      caption="Crabeater seal abundance estimates for study area of arbitrary size.")
```

### Crabeater seals with MCDS (optional)

We can also analyse the crabeater seals data as if it were single platform data (i.e. ignoring that $p(0)$ is less than 1). These data are available in [`crabbieMCDS.csv`](crabbieMCDS.csv`).

This short exercise guides you through the import of these data into R and fits a simple half-normal detection function examining the possible improvement of the model by incorporating _side of plane_ and _visibility_ covariates (using the full dataset).

```{r, message=FALSE, comment=NA}
# Load Distance for MCDS 
library(Distance)
# Read in data
crab.covar <- read.csv("crabbieMCDS.csv")
# Check data imported OK
head(crab.covar, n=3)
```

After checking that the data have been read into `R` appropriately, we are ready to fit a detection function.  

As before, _side of plane_ and _visibility_ are assigned characters and so we need to tell R to treat them as factors. 

```{r, comment=NA}
# Define factor variables
crab.covar$side <- as.factor(crab.covar$side)
crab.covar$vis <- as.factor(crab.covar$vis)
```

With two potential explanatory variables, there are a number of possible models. We start by fitting a detection function with _side of plane_ as a covariate using a half-normal key function. 

```{r, comment=NA}
# Fit HN key function with side of plane
ds.side <- ds(crab.covar, key="hn", formula=~side, truncation=700)
```

We would now like to assess the fit of this function to our data. Two visual assessments are provided by the panels below: histogram and fitted function on the left and Q-Q plot on the right.

```{r, fig.cap="Histogram and fitted half-normal detection function on left.  Q-Q plot of detection function and data on right."}
# Divide plot region
par(mfrow = c(1, 2))
# Create a title for the plot
plot.title <- "Two sets of points\none for each 'side' of plane"
# Plot model
plot(ds.side, pch=19, cex=0.5, main=plot.title)
# Plot qq plot
gof.result <- gof_ds(ds.side, lwd = 2, lty = 1, pch = ".", cex = 0.5)
# Extract gof statistics
message <- paste("CVM GOF p-value=", round(gof.result$dsgof$CvM$p, 4))
# Add gof stats to plot
text(0.6, 0.2, message, cex=0.5)
```

The code below fits the model without any covariates.

```{r, comment=NA}
# Fit HN key function with no covars and no adjustments
ds.nocov <- ds(crab.covar, key="hn", adjustment=NULL, truncation=700)
```

AIC score for model without covariates is `r options(scipen=11)` `r round(ds.nocov$ddf$criterion, 2)` and AIC score for model with _side_ as a covariate is  `r round(ds.side$ddf$criterion, 2)` so the model with _side_ as a covariate is preferred.  

We could also fit further detection functions and contrast the resulting models:

- with _visibility_ only
- with _side of plane_ and _visibility_ (excluding an interaction). 

*Out of the four possible models which is to be preferred?*

Further modelling is possible.  For example, we typically allow adjustment terms in CDS analyses (i.e., where there are not covariates), and it is also possible to include adjustment terms in MCDS analyses.  Below is a model with half-normal key and AIC-based selection of cosine adjustments.  How does the AIC of this model compare with those fitted previously?

```{r, comment=NA}
# Fit HN key function with no covars and no adjustments
ds.nocov.hncos <- ds(crab.covar, key="hn", adjustment="cos", truncation=700)
```

We could go on to produce abundance estimates from our preferred model using the `dht` function if we had provided information about the size of the crabeater seal study area.

*Rather than fitting an MRDS model, as above, would an MCDS analyses have been adequate?*
